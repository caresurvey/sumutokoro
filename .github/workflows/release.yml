name: 本番サーバへのデプロイ

on:
  push:
    branches:
      - release

jobs:

  deploy:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: 下準備
        run: |
          mkdir -p ~/.ssh
          mkdir -p storage/app/photos/spots
          ln -s storage/app/photos public/photos

      - name: docker-compose準備・起動
        run: |
          rm docker-compose.yml
          cp system/docker/ci/x86/docker-compose.yml ./
          docker-compose up -d

      - name: キャッシュディレクトリ設定
        run: |
          mkdir bootstrap/cache
          chmod -R 707 bootstrap/cache
          chmod -R 707 storage

      - name: CI実行用のenvファイル設定
        run: |
          cp system/ci/env ./.env
          cp system/ci/env.dusk ./.env.dusk
          cp system/ci/env.testing ./.env.testing

      - name: composerインストール
        run: docker-compose exec -T php sh -c "composer install"

      - name: 本番サーバーにSSH接続するためのkeyとknown_hostsの設定
        run: |
          echo "${{ secrets.SSH_KEY_PRODUCTION }}" > ~/.ssh/secretkey
          chmod 600 ~/.ssh/secretkey
          ssh-keyscan ${{ secrets.SSH_HOST_PRODUCTION }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY_PRODUCTION }}

      - name: deployerのファイルを配置
        run: |
          cp system/deployer/deploy.php ./deploy.php

      #- name: デバッグ時にCI内にSSH接続する（通常は使用しないのでコメントアウトすること）
      #  uses: mxschmitt/action-tmate@v1

      - name: WEBアプリのユニットテスト・結合テストを行う (PHPUnit)
        run: |
          docker-compose exec -T php ./vendor/bin/phpunit -c packages/Tool/Admin/tests/
          docker-compose exec -T php ./vendor/bin/phpunit -c packages/Tool/General/tests/
          docker-compose exec -T php ./vendor/bin/phpunit -c packages/Tool/User/tests/

      - name: WEBアプリのE2Eテストを行う (Laravel Dusk)
        run: |
           docker-compose exec -T php php artisan dusk packages/Tool/Admin/tests/
           docker-compose exec -T php php artisan dusk packages/Tool/General/tests/
           docker-compose exec -T php php artisan dusk packages/Tool/User/tests/

      #- name: デプロイ用のcomposerに切り替えて、composerをセットし直す（#環境をproductionにする必要があるので、.envを差し替え）
      #  run: |
      #    docker-compose exec -T php sh -c "composer update --no-dev"

      - name: デプロイを行う（deployer7系／deploy.php）
        run: ./vendor/bin/dep deploy production -vvvv

