name: 本番環境バックアップ

on:
  push:
    branches:
      - backup

  #schedule:
    # 定期実行する時間
  #  - cron: '0 22 * * *'      

jobs:

  deploy:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: 下準備
        run: mkdir -p ~/.ssh

      - name: docker-compose準備・起動
        run: |
          rm docker-compose.yml
          cp system/docker/backup/x86/docker-compose.yml ./
          docker-compose up -d

      - name: composerインストール（backup用のcomposer.jsonに切り替えて実行）
        run: |
          rm composer.json
          cp system/docker/backup/composer.json ./
          docker-compose exec -T php sh -c "composer install"

      - name: 本番サーバーにSSH接続するためのkeyとknown_hostsの設定
        run: |
          echo "${{ secrets.SSH_KEY_PRODUCTION }}" > ~/.ssh/secretkey
          chmod 600 ~/.ssh/secretkey
          ssh-keyscan ${{ secrets.SSH_HOST_PRODUCTION }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY_PRODUCTION }}

      - name: 転送用のディレクトリを作成
        run: |
          mkdir backup

      - name: バックアップ用のスクリプトファイルを作成
        run: |
          touch backup/backup.sh
          echo '# バックアップ用のディレクトリを作成'
          echo 'mkdir/backup' >> backup/backup.sh
          echo '# バックアップ用のディレクトリに移動'
          echo 'cd backup' >> backup/backup.sh
          echo '# 本番用DBをdumpする'
          echo 'mysqldump --no-tablespaces -u ${{DB_USER_NAME_PRODUCTION}} -p -h ${{DB_HOST_NAME_PRODUCTION}} ${{DB_NAME_PRODUCTION}} > backup/backup.sql' >> backup/backup.sh
          echo '# dumpしたDBをzip圧縮'
          echo 'zip -R dump.sql.zip dump.sql' >> backup/backup.sh
          echo '# データディレクトリをzip圧縮'
          echo 'zip -R datas.zip ~/www/datas' >> backup/backup.sh
          echo '# メールBOXをzip圧縮'
          echo 'zip -R MailBox.zip ~/MailBox' >> backup/backup.sh
          echo '# バックアップ用のディレクトリから出る'
          echo 'cd ../' >> backup/backup.sh
          echo '# バックアップ用のディレクトリをまるごとzip圧縮する'
          echo 'zip -R backup.zip backup' >> backup/backup.sh
          echo '# バックアップディレクトリを削除する'
          echo 'rm -R backup' >> backup/backup.sh

      - name: deployerのファイルを配置
        run: |
          cp system/deployer/backup.php ./deploy.php

      - name: デバッグ時にCI内にSSH接続する（通常は使用しないのでコメントアウトすること）
        uses: mxschmitt/action-tmate@v1

      - name: リモートサーバーでバックアップを行う（deployer7系／deploy.php）
        run: ./vendor/bin/dep backup production -vvvv

      - name: リモートサーバーからバックアップデータをダウンロードする
        run: |
          scp -i ~/.ssh/secretkey -r ${{ secrets.SSH_USER_PRODUCTION }}@${{ secrets.SSH_HOST_PRODUCTION }}:./backup/



